name: Build and Push to ECR

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: photo-uploader-prod-repo
  ECS_SERVICE: photo-uploader-prod-service
  ECS_CLUSTER: photo-uploader-prod-cluster
  CONTAINER_NAME: photo-uploader-prod-container

jobs:
  build-and-push:
    name: Build Docker Image and Push to ECR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: |
          mvn clean package -DskipTests
        env:
          MAVEN_OPTS: -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/photo-uploader-prod-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          # Push the Docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Also tag as latest for convenience
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Set output for deployment step
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Add debugging step to check what exists
      - name: Debug - List ECS resources
        run: |
          echo "=== Listing ECS Clusters ==="
          aws ecs list-clusters --region $AWS_REGION
          
          echo "=== Checking if cluster exists ==="
          if aws ecs describe-clusters --clusters $ECS_CLUSTER --region $AWS_REGION --query 'clusters[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
            echo "✓ Cluster $ECS_CLUSTER exists and is active"
          
            echo "=== Listing services in cluster ==="
            aws ecs list-services --cluster $ECS_CLUSTER --region $AWS_REGION
          
            echo "=== Checking if service exists ==="
            if aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --region $AWS_REGION --query 'services[0].status' --output text 2>/dev/null | grep -q "ACTIVE\|RUNNING\|PENDING"; then
              echo "✓ Service $ECS_SERVICE exists"
            else
              echo "✗ Service $ECS_SERVICE does not exist or is not active"
              echo "Available services:"
              aws ecs list-services --cluster $ECS_CLUSTER --region $AWS_REGION --query 'serviceArns[]' --output table
            fi
          else
            echo "✗ Cluster $ECS_CLUSTER does not exist or is not active"
            echo "Available clusters:"
            aws ecs list-clusters --region $AWS_REGION --query 'clusterArns[]' --output table
          fi

      - name: Update ECS Service (conditional)
        run: |
          # Only update if service exists
          if aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --region $AWS_REGION --query 'services[0].status' --output text 2>/dev/null | grep -q "ACTIVE\|RUNNING\|PENDING"; then
            echo "Service exists, proceeding with update..."
            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $ECS_SERVICE \
              --force-new-deployment \
              --region $AWS_REGION
          else
            echo "Service does not exist. Skipping deployment step."
            echo "Please create the ECS service first or update the environment variables."
            exit 1
          fi

      - name: Wait for service stability
        run: |
          # Only wait if we actually updated the service
          if aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --region $AWS_REGION --query 'services[0].status' --output text 2>/dev/null | grep -q "ACTIVE\|RUNNING\|PENDING"; then
            echo "Waiting for ECS service to stabilize..."
            aws ecs wait services-stable \
              --cluster $ECS_CLUSTER \
              --services $ECS_SERVICE \
              --region $AWS_REGION
            echo "Service is now stable!"
          else
            echo "Service does not exist, skipping stability check."
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run unit tests
        run: mvn test

      - name: Run integration tests
        run: mvn integration-test